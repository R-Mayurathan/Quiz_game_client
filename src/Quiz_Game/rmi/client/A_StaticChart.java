package Quiz_Game.rmi.client;

import Quiz_Game.Interface.Interface;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.sql.rowset.CachedRowSet;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * This is the program to generate charts using the QuickChart api.
 * @author  Rasu Mayurathan
 * @version 1.0
 * @since   2021-11-22
 */
public class A_StaticChart extends javax.swing.JFrame {

    /**
     * Creates new form CheckingChart
     */
    public A_StaticChart() {
        initComponents();

        String answers1 = "2", answers2 = "3", answers3 = "5", Link = "";
        BufferedImage image = null;
        try {
            /*The suspect that this block of statement can throw
            * exception so we handled it by placing these statements
            * inside try and handled the exception in catch block
             */

            Interface a = (Interface) Naming.lookup("rmi://localhost:1099/Server");////It calls naming lookup and url  
            CachedRowSet countgoodmarks = a.countgoodmarks();//getting goodmarks

            Interface b = (Interface) Naming.lookup("rmi://localhost:1099/Server");////It calls naming lookup and url  
            CachedRowSet countaveragemarks = b.countaveragemarks();//getting average marks

            Interface c = (Interface) Naming.lookup("rmi://localhost:1099/Server");////It calls naming lookup and url  
            CachedRowSet countlowmarks = c.countlowmarks();//getting low marks

            while (countgoodmarks.next()) {
                int id = countgoodmarks.getInt(1); 
                answers1 = String.valueOf(id);//to convert an integer to string
            }

            while (countaveragemarks.next()) {
                int id = countaveragemarks.getInt(1);
                answers2 = String.valueOf(id);//to convert an integer to string
            }

            while (countlowmarks.next()) {
                int id = countlowmarks.getInt(1);
                answers3 = String.valueOf(id);//to convert an integer to string
            }

            //calling the API and importing data what i got from database through rmi
            Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\'], backgroundColor: [ 'rgb(137,203,42)', 'rgb(211,191,105)',  'rgb(237,125,49)' ], label: 'Range', }, ], labels: ['Good Marks (8-10)  ', 'Average Marks (4-7) ', 'Low Marks (0-3)  '],},}";
            
            Link = Link.replace(" ", "");
            URL url1;

            url1 = new URL(Link);

            HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();

            urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");

            image = ImageIO.read(urlcon.getInputStream());
            ImageIcon icon = new ImageIcon(image);
            ImageLabel.setIcon(icon);//Here Iam getting output in chart format

        } catch (IOException | NotBoundException | SQLException e) {
            /*
                     *This block will only execute if any  exception occurs in try block
             */
            JOptionPane.showMessageDialog(null, e);
        }

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImageLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setLocation(new java.awt.Point(425, 262));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(ImageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 946, 607));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Close-black-32.gif"))); // NOI18N
        jButton1.setOpaque(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 0, 40, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         AdminHomePanel.open=0;
         setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(A_StaticChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(A_StaticChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(A_StaticChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(A_StaticChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new A_StaticChart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ImageLabel;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
